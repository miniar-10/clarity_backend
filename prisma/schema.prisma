// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin{
  id Int @id @default(autoincrement())
  firstName String?
  lastName String?
  hash String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email String @unique
  whatsapp String?
  invoices Invoice[]
  projects Project []
  clients Client[]
  @@map("admins")
} 

model Client{
  id Int @id @default(autoincrement())
  firstName String?
  lastName String?
  hash String
  token String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email String @unique
  whatsapp String?
  adminId Int 
  admin Admin @relation(fields:[adminId],references: [id])
  projects Project [] //empty zaama?
  sharedLinks SharedLink[]
  invoices Invoice[]

} 

model Project{
// -invoice_id
// -service:Service
// -project_language: Language
// -ressources_language:Language
// -milestones: table[Milestone]
// - is_paid: boolean(calculée)?
  id Int @id @default(autoincrement())
  name String?
  details String?
  isPinned Boolean @default(false)
  briefing String
  is_reccurent Boolean @default(false)
  deadline DateTime
  budget Decimal
  clientId Int 
  client Client @relation(fields:[clientId],references: [id], onDelete: Cascade)
  adminId Int
  admin Admin @relation(fields:[adminId],references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  categoryId Int
  projectCategory Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  // ressources Ressource[]
  invoiceId Int
  // invoice Invoice @relation(fields: [invoiceId],references: [id])
} 
// -is_finished: boolean(calculée)

model Milestone{
  id Int @id @default(autoincrement())
  name String?
  details String?
  order Int
  deadline DateTime
  deliveryDate DateTime
  socre Float
  actionItems ActionItem[]
  statusId Int
  // status Status @relation(fields: [statusId], references: [id])
  // delivrables Delivrable[]
}
model ActionItem{
  id Int @id @default(autoincrement())
  name String?
  description String?
  deadline DateTime?
  milestoneId Int
  assigneeId Int?
  milestone Milestone @relation(fields:[milestoneId],references: [id], onDelete: Cascade)
}
model Language{
  id Int @id @default(autoincrement())
  name String @unique
}
model ProjectLanguage{
 id Int @id @default(autoincrement())
 languageId Int
 projectId Int
 isRessourceLanguage Boolean @default(false)
 isDeliverableLanguage Boolean @default(false)
}
model Status{
  id Int @id @default(autoincrement())
  name String
  // milestones Milestone[]
}

model Category{
    id Int @id @default(autoincrement())
    name String
    projects Project[]
}
model SharedLink {
id Int @id @default(autoincrement())
name String?
details String?
link String
clientId Int
client Client @relation(fields: [clientId], references:[id])
ressources Ressource[]
delivrables Delivrable[]
}
model Ressource{
  id Int @id @default(autoincrement())
  projectId Int
  // project Project @relation(fields: [projectId], references: [id])
  sharedLinkId Int
  sharedLink SharedLink @relation(fields: [sharedLinkId], references: [id])
}
model Delivrable{
  id Int @id @default(autoincrement())
  milestoneId Int
  // milestone Milestone @relation(fields: [milestoneId], references: [id])
  sharedLinkId Int
  sharedLink SharedLink @relation(fields: [sharedLinkId], references: [id])
}
model Invoice{
 id Int @id @default(autoincrement()) 
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 paiedAt DateTime @default(now())
//  projects Project[]
 clientId Int
 client Client @relation(fields: [clientId],references: [id])
 adminId Int
 admin Admin @relation(fields: [adminId], references: [id])
}